{"remainingRequest":"/home/runner/work/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/index.js??vue-loader-options!/home/runner/work/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/src/pages/Tema3.vue?vue&type=template&id=575e0a26&lang=pug","dependencies":[{"path":"/home/runner/work/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/src/pages/Tema3.vue","mtime":1734970342832},{"path":"/home/runner/work/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/babel-loader/lib/index.js","mtime":456789000000},{"path":"/home/runner/work/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/home/runner/work/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/pug-plain-loader/index.js","mtime":499162500000},{"path":"/home/runner/work/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/home/runner/work/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/CF12_228141_TG_DESARROLLO_APLICANDO_INTELIGENCIA_ARTIFICIAL/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ci5jdXJzby1tYWluLWNvbnRhaW5lci5wYi0zCiAgQmFubmVySW50ZXJubwogIC5jb250YWluZXIudGFyamV0YS50YXJqZXRhLS1ibGFuY2EucC00LnAtbWQtNS5tYi01CiAgICAudGl0dWxvLXByaW5jaXBhbC5jb2xvci1hY2VudG8tY29udGVuaWRvCiAgICAgIC50aXR1bG8tcHJpbmNpcGFsX19udW1lcm8KICAgICAgICBzcGFuIDMKICAgICAgaDEgTcOpdHJpY2FzIGF2YW56YWRhcyBkZSBldmFsdWFjacOzbiB5IGFqdXN0ZSBkZSBtb2RlbG9zCiAgICAKICAgICN0XzNfMS50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvKGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykKICAgICAgaDIgMy4xIE1hdHJpeiBkZSBjb25mdXNpw7NuIHkgYW7DoWxpc2lzIGRlIGVycm9yZXMKICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtc20tMTIuY29sLWxnLTcKICAgICAgICBwLm1iLTMgTGEgbWF0cml6IGRlIGNvbmZ1c2nDs24gZXMgdW5hIGhlcnJhbWllbnRhIGVzZW5jaWFsIGVuIGxhIGV2YWx1YWNpw7NuIGRlIG1vZGVsb3MgZGUgY2xhc2lmaWNhY2nDs24uIFBlcm1pdGUgdmlzdWFsaXphciBlbCBkZXNlbXBlw7FvIGRlbCBtb2RlbG8gYWwgbW9zdHJhciBsYXMgcHJlZGljY2lvbmVzIGNvcnJlY3RhcyBlIGluY29ycmVjdGFzIGVuIGNhZGEgY2F0ZWdvcsOtYS4gRXN0YSBtYXRyaXogZXMgZnVuZGFtZW50YWwgcGFyYSBjb21wcmVuZGVyIG5vIHNvbG8gY3XDoW50YXMgcHJlZGljY2lvbmVzIGZ1ZXJvbiBhY2VydGFkYXMsIHNpbm8gdGFtYmnDqW4gcGFyYSBpZGVudGlmaWNhciBkw7NuZGUgeSBwb3IgcXXDqSBzZSBwcm9kdWNlbiBsb3MgZXJyb3Jlcy4KICAgICAgICBwLm1iLTAgSW1hZ2luZW1vcyB1biBtb2RlbG8gcXVlIGNsYXNpZmljYSBpbcOhZ2VuZXMgZGUgZ2F0b3MgeSBwZXJyb3MuIExhIG1hdHJpeiBkZSBjb25mdXNpw7NuIG5vcyBpbmRpY2Fyw61hIGN1w6FudGFzIGltw6FnZW5lcyBkZSBnYXRvcyBmdWVyb24gY29ycmVjdGFtZW50ZSBjbGFzaWZpY2FkYXMgY29tbyBnYXRvcyAodmVyZGFkZXJvcyBwb3NpdGl2b3MpLCBjdcOhbnRhcyBmdWVyb24gaW5jb3JyZWN0YW1lbnRlIGNsYXNpZmljYWRhcyBjb21vIHBlcnJvcyAoZmFsc29zIG5lZ2F0aXZvcyksIHkgbG8gbWlzbW8gcGFyYSBsYXMgaW3DoWdlbmVzIGRlIHBlcnJvcy4gRXN0ZSBhbsOhbGlzaXMgZGV0YWxsYWRvIGF5dWRhIGEgaWRlbnRpZmljYXIgcGF0cm9uZXMgZW4gbG9zIGVycm9yZXMsIGNvbW8gc2kgZWwgbW9kZWxvIGNvbmZ1bmRlIG3DoXMgYSBtZW51ZG8gdW4gdGlwbyBlc3BlY8OtZmljbyBkZSBwZXJybyBjb24gdW4gZ2F0bywgbG8gcXVlIHBvZHLDrWEgaW5kaWNhciBsYSBuZWNlc2lkYWQgZGUgbcOhcyBkYXRvcyBkZSBlbnRyZW5hbWllbnRvIG8gYWp1c3RlcyBlbiBlbCBwcmVwcm9jZXNhbWllbnRvLgogICAgICAuY29sLXNtLTEyLmNvbC1sZy01LmQtbm9uZS5kLWxnLWJsb2NrOiBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy90My8xLnBuZycsIGFsdD0nJykKICAgIAogICAgLmJnLWNvbG9yLTIucC00Lm1iLTUKICAgICAgcC5tYi0wIEVsIGFuw6FsaXNpcyBkZSBlcnJvcmVzIHZhIG3DoXMgYWxsw6EgZGUgY29udGFyIGxhcyBwcmVkaWNjaW9uZXMgaW5jb3JyZWN0YXM7IGltcGxpY2EgZW50ZW5kZXIgbGFzIGNhdXNhcyBzdWJ5YWNlbnRlcy4gUG9yIGVqZW1wbG8sIHNpIGVsIG1vZGVsbyBjb25mdW5kZSBjb25zaXN0ZW50ZW1lbnRlIGdhdG9zIG5lZ3JvcyBjb24gcGVycm9zLCBwb2Ryw61hIGRlYmVyc2UgYSBjb25kaWNpb25lcyBkZSBpbHVtaW5hY2nDs24gZW4gbGFzIGltw6FnZW5lcyBvIGEgY2FyYWN0ZXLDrXN0aWNhcyB2aXN1YWxlcyBzaW1pbGFyZXMuIEFsIHByb2Z1bmRpemFyIGVuIGVzdG9zIGVycm9yZXMsIHBvZGVtb3MgcmVhbGl6YXIgbWVqb3JhcyBlc3BlY8OtZmljYXMsIGNvbW8gYWp1c3RhciBlbCBiYWxhbmNlIGRlIGNsYXNlcyBlbiBlbCBjb25qdW50byBkZSBkYXRvcywgYXBsaWNhciB0w6ljbmljYXMgZGUgYXVtZW50byBkZSBkYXRvcyBvIHJlZmluYXIgbGEgYXJxdWl0ZWN0dXJhIGRlbCBtb2RlbG8uCiAgICAKICAgIAogICAgCiAgICBTZXBhcmFkb3IKICAgICN0XzNfMi50aXR1bG8tc2VndW5kby5jb2xvci1hY2VudG8tY29udGVuaWRvKGRhdGEtYW9zPSdmYWRlLXJpZ2h0JykKICAgICAgaDIgMy4yIEN1cnZhcyBST0MgeSDDoXJlYSBiYWpvIGxhIGN1cnZhIChBVUMpCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy0zLmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICAgIGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL3QzLzIucG5nJykKCiAgICAgICAgLmNvbC1zbS0xMi5jb2wtbGctOQogICAgICAgICAgLnRhcmpldGEuYmctY29sb3ItNS5wLTQKICAgICAgICAgICAgcC5tYi0zIExhcyBjdXJ2YXMgUk9DICgjW2VtIFJlY2VpdmVyIE9wZXJhdGluZyBDaGFyYWN0ZXJpc3RpY10pIHNvbiB1bmEgcmVwcmVzZW50YWNpw7NuIGdyw6FmaWNhIHF1ZSBwZXJtaXRlIGV2YWx1YXIgZWwgcmVuZGltaWVudG8gZGUgdW4gbW9kZWxvIGRlIGNsYXNpZmljYWNpw7NuIGJpbmFyaWEgYSBkaWZlcmVudGVzIHVtYnJhbGVzIGRlIGRpc2NyaW1pbmFjacOzbi4gRW4gZWwgZWplIHZlcnRpY2FsIHNlIHJlcHJlc2VudGEgbGEgdGFzYSBkZSB2ZXJkYWRlcm9zIHBvc2l0aXZvcyAoc2Vuc2liaWxpZGFkKSB5IGVuIGVsIGVqZSBob3Jpem9udGFsIGxhIHRhc2EgZGUgZmFsc29zIHBvc2l0aXZvcyAoMSAtIGVzcGVjaWZpY2lkYWQpLiBBbCB0cmF6YXIgbGEgY3VydmEgUk9DLCBwb2RlbW9zIG9ic2VydmFyIGPDs21vIHZhcsOtYSBlbCBkZXNlbXBlw7FvIGRlbCBtb2RlbG8gYWwgbW9kaWZpY2FyIGVsIHVtYnJhbCBkZSBkZWNpc2nDs24uCiAgICAgICAgICAgIHAubWItMCBFbCDDoXJlYSBiYWpvIGxhIGN1cnZhIChBVUMpIGVzIHVuYSBtZWRpZGEgcXVlIHJlc3VtZSBlbCByZW5kaW1pZW50byBkZWwgbW9kZWxvIGVuIHVuYSBzb2xhIGNpZnJhLiBVbiBBVUMgY2VyY2FubyBhIDEgaW5kaWNhIHVuIG1vZGVsbyBjb24gZXhjZWxlbnRlIGNhcGFjaWRhZCBkZSBkaXNjcmltaW5hY2nDs24gZW50cmUgbGFzIGNsYXNlcywgbWllbnRyYXMgcXVlIHVuIEFVQyBkZSAwLjUgc3VnaWVyZSBxdWUgZWwgbW9kZWxvIG5vIGVzIG1lam9yIHF1ZSB1bmEgZGVjaXNpw7NuIGFsIGF6YXIuIExhIHZlbnRhamEgZGVsIEFVQyBlcyBxdWUgZXMgaW5kZXBlbmRpZW50ZSBkZWwgdW1icmFsIGVsZWdpZG8sIHByb3BvcmNpb25hbmRvIHVuYSBldmFsdWFjacOzbiBnZW5lcmFsIGRlbCBtb2RlbG8uCiAgICBwLm1iLTMgUG9yIGVqZW1wbG8sIGVuIGVsIGRpYWduw7NzdGljbyBtw6lkaWNvLCBkb25kZSBlcyB0YW4gc2Vuc2libGUgZGV0ZWN0YXIgZW5mZXJtZWRhZGVzIGdyYXZlcywgbGFzIGN1cnZhcyBST0MgeSBlbCBBVUMgcGVybWl0ZW4gc2VsZWNjaW9uYXIgZWwgdW1icmFsIHF1ZSBlcXVpbGlicmEgYWRlY3VhZGFtZW50ZSBsYSBzZW5zaWJpbGlkYWQgeSBsYSBlc3BlY2lmaWNpZGFkIHNlZ8O6biBsYXMgbmVjZXNpZGFkZXMgY2zDrW5pY2FzLiBTaSBwcmlvcml6YW1vcyBtaW5pbWl6YXIgbG9zIGZhbHNvcyBuZWdhdGl2b3MsIHBvZHLDrWFtb3MgZWxlZ2lyIHVuIHVtYnJhbCBxdWUgYXVtZW50ZSBsYSBzZW5zaWJpbGlkYWQsIGFjZXB0YW5kbyB1biBtYXlvciBuw7ptZXJvIGRlIGZhbHNvcyBwb3NpdGl2b3MuCiAgICAKICAgIFNlcGFyYWRvcgogICAgI3RfM18zLnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8oZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKQogICAgICBoMiAzLjMgTWFuZWpvIGRlIGRhdG9zIGRlc2JhbGFuY2VhZG9zCiAgICBwLm1iLTUgRW4gbXVjaG9zIHByb2JsZW1hcyByZWFsZXMsIGxhcyBjbGFzZXMgZW4gbG9zIGRhdG9zIG5vIGVzdMOhbiBlcXVpbGlicmFkYXMuIEVzdG8gc2lnbmlmaWNhIHF1ZSB1bmEgY2xhc2UgcHVlZGUgZXN0YXIgcmVwcmVzZW50YWRhIHBvciB1bmEgY2FudGlkYWQgc2lnbmlmaWNhdGl2YW1lbnRlIG1lbm9yIGRlIGVqZW1wbG9zIHF1ZSBsYSBvdHJhLiBVbiBlamVtcGxvIGNvbcO6biBlcyBsYSBkZXRlY2Npw7NuIGRlIGZyYXVkZXMgZmluYW5jaWVyb3MsIGRvbmRlIGxhcyB0cmFuc2FjY2lvbmVzIGZyYXVkdWxlbnRhcyBzb24gdW5hIGZyYWNjacOzbiBtdXkgcGVxdWXDsWEgZGVsIHRvdGFsLiBFc3RlIGRlc2JhbGFuY2UgcHVlZGUgY2F1c2FyIHF1ZSBsb3MgbW9kZWxvcyBhcHJlbmRhbiBhIHByZWRlY2lyIHNpZW1wcmUgbGEgY2xhc2UgbWF5b3JpdGFyaWEsIGlnbm9yYW5kbyBsYSBtaW5vcml0YXJpYS4KICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5tYi01CiAgICAgIC5jb2wtc20tMTIuY29sLWxnLTMuZC1ub25lLmQtbGctYmxvY2s6IGltZyhzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL3QzLzMucG5nJywgYWx0PScnKQogICAgICAuY29sLXNtLTEyLmNvbC1sZy01IAogICAgICAgIC5iZy1jb2xvci0xMC5wLTMKICAgICAgICAgIHAubWItMCBQYXJhIGFib3JkYXIgZXN0ZSBkZXNhZsOtbywgZXMgaW1wb3J0YW50ZSBhcGxpY2FyIGVzdHJhdGVnaWFzIHF1ZSBjb21wZW5zZW4gZWwgZGVzYmFsYW5jZS4gVW5hIGRlIGVsbGFzIGVzIGVsIG11ZXN0cmVvLCBxdWUgcHVlZGUgc2VyIGRlIGRvcyB0aXBvczogc3VibXVlc3RyZW8gZGUgbGEgY2xhc2UgbWF5b3JpdGFyaWEgbyBzb2JyZW11ZXN0cmVvIGRlIGxhIGNsYXNlIG1pbm9yaXRhcmlhLiBFbCBzdWJtdWVzdHJlbyBpbXBsaWNhIHJlZHVjaXIgZWwgbsO6bWVybyBkZSBlamVtcGxvcyBkZSBsYSBjbGFzZSBkb21pbmFudGUgcGFyYSBlcXVpbGlicmFyIGVsIGNvbmp1bnRvIGRlIGRhdG9zLCBtaWVudHJhcyBxdWUgZWwgc29icmVtdWVzdHJlbyBjb25zaXN0ZSBlbiBhdW1lbnRhciBlbCBuw7ptZXJvIGRlIGVqZW1wbG9zIGRlIGxhIGNsYXNlIG1pbm9yaXRhcmlhLCB5YSBzZWEgcmVwbGljYW5kbyBkYXRvcyBleGlzdGVudGVzIG8gZ2VuZXJhbmRvIG51ZXZvcyBlamVtcGxvcyBzaW50w6l0aWNvcyBtZWRpYW50ZSB0w6ljbmljYXMgY29tbyAjW2VtIFNNT1RFIChTeW50aGV0aWMgTWlub3JpdHkgT3Zlci1zYW1wbGluZyBUZWNobmlxdWUpLl0KICAgICAgLmNvbC1zbS0xMi5jb2wtbGctNC5kLW5vbmUuZC1sZy1ibG9jazogaW1nKHNyYz0nQC9hc3NldHMvY3Vyc28vdGVtYXMvdDMvNC5zdmcnLCBhbHQ9JycpCiAgICBwLm1iLTAgT3RyYSBlc3RyYXRlZ2lhIGVzIHV0aWxpemFyIGFsZ29yaXRtb3MgcXVlIHNlYW4gaW50csOtbnNlY2FtZW50ZSByb2J1c3RvcyBhIGxvcyBkYXRvcyBkZXNiYWxhbmNlYWRvcy4gTG9zIG3DqXRvZG9zIGRlIGVuc2FtYmxhZG8sIGNvbW8gZWwgI1tlbSBCb29zdGluZ10sIHB1ZWRlbiBkYXIgbWF5b3IgcGVzbyBhIGxhcyBvYnNlcnZhY2lvbmVzIGRlIGxhIGNsYXNlIG1pbm9yaXRhcmlhLCBtZWpvcmFuZG8gc3UgZGV0ZWNjacOzbi4gQWRlbcOhcywgZXMgY2xhdmUgc2VsZWNjaW9uYXIgbcOpdHJpY2FzIGRlIGV2YWx1YWNpw7NuIGFkZWN1YWRhcy4gRW4gbHVnYXIgZGUgY29uZmlhciDDum5pY2FtZW50ZSBlbiBsYSBwcmVjaXNpw7NuIGdsb2JhbCwgZXMgcHJlZmVyaWJsZSB1dGlsaXphciBtw6l0cmljYXMgY29tbyBlbCAjW2VtIHJlY2FsbF0sIGxhIHByZWNpc2nDs24gKCNbZW0gUHJlY2lzaW9uXSkgeSBlbCAjW2VtIEYxLXNjb3JlXSwgcXVlIG9mcmVjZW4gdW5hIHZpc2nDs24gbcOhcyBlcXVpbGlicmFkYSBkZWwgcmVuZGltaWVudG8gZW4gYW1iYXMgY2xhc2VzLgogICAgCiAgICAKICAgIFNlcGFyYWRvcgogICAgI3RfM180LnRpdHVsby1zZWd1bmRvLmNvbG9yLWFjZW50by1jb250ZW5pZG8oZGF0YS1hb3M9J2ZhZGUtcmlnaHQnKQogICAgICBoMiAzLjQgUHJvYmFyIHkgYWp1c3RhciBlbCBtb2RlbG8KICAgIC5yb3cuanVzdGlmeS1jb250ZW50LWNlbnRlci5hbGlnbi1pdGVtcy1jZW50ZXIubWItNQogICAgICAgIC5jb2wtc20tMTIuY29sLWxnLTQuZC1ub25lLmQtbGctYmxvY2sKICAgICAgICAgICAgaW1nLm1iLTAoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy90My81LnBuZycpCgogICAgICAgIC5jb2wtc20tMTIuY29sLWxnLTgKICAgICAgICAgIC50YXJqZXRhLmJnLWNvbG9yLTIucHktMy5weC00CiAgICAgICAgICAgIHAubWItMCBFbCBwcm9jZXNvIGRlIHByb2JhciB5IGFqdXN0YXIgZWwgbW9kZWxvIGVzIHVuYSBldGFwYSBpdGVyYXRpdmEgcXVlIGJ1c2NhIG9wdGltaXphciBzdSByZW5kaW1pZW50by4gRGVzcHXDqXMgZGUgZW50cmVuYXIgZWwgbW9kZWxvIGluaWNpYWwsIGVzIGZ1bmRhbWVudGFsIGV2YWx1YXJsbyBlbiB1biBjb25qdW50byBkZSB2YWxpZGFjacOzbiBwYXJhIG1lZGlyIHN1IGNhcGFjaWRhZCBkZSBnZW5lcmFsaXphY2nDs24uIEVzdGEgZXZhbHVhY2nDs24gcGVybWl0ZSBpZGVudGlmaWNhciBwcm9ibGVtYXMgY29tbyBlbCBzb2JyZWFqdXN0ZSwgZG9uZGUgZWwgbW9kZWxvIGFwcmVuZGUgZGVtYXNpYWRvIGJpZW4gbG9zIGRldGFsbGVzIGRlbCBjb25qdW50byBkZSBlbnRyZW5hbWllbnRvIHkgbm8gZ2VuZXJhbGl6YSBiaWVuIGEgZGF0b3MgbnVldm9zLgogICAgcC5tYi0zIEVsIGFqdXN0ZSBkZWwgbW9kZWxvIHB1ZWRlIGludm9sdWNyYXIgdmFyaWFzIGFjY2lvbmVzLiBVbmEgZGUgZWxsYXMgZXMgbGEgb3B0aW1pemFjacOzbiBkZSBoaXBlcnBhcsOhbWV0cm9zLCBxdWUgc29uIHBhcsOhbWV0cm9zIGRlbCBtb2RlbG8gcXVlIG5vIHNlIGFwcmVuZGVuIGRpcmVjdGFtZW50ZSBkdXJhbnRlIGVsIGVudHJlbmFtaWVudG8sIGNvbW8gbGEgcHJvZnVuZGlkYWQgbcOheGltYSBkZSB1biDDoXJib2wgZGUgZGVjaXNpw7NuIG8gbGEgdGFzYSBkZSBhcHJlbmRpemFqZSBlbiB1biBhbGdvcml0bW8gZGUgI1tlbSBCb29zdGluZ10uIExhIGLDunNxdWVkYSBkZSBsb3MgdmFsb3JlcyDDs3B0aW1vcyBwYXJhIGVzdG9zIGhpcGVycGFyw6FtZXRyb3MgcHVlZGUgcmVhbGl6YXJzZSBtZWRpYW50ZSBtw6l0b2RvcyBzaXN0ZW3DoXRpY29zIGNvbW8gbGEgYsO6c3F1ZWRhIGVuIGN1YWRyw61jdWxhICgjW2VtIGdyaWQgc2VhcmNoXSkgbyBhbGdvcml0bW9zIG3DoXMgYXZhbnphZG9zIGNvbW8gbGEgb3B0aW1pemFjacOzbiBiYXllc2lhbmEuCiAgICAucm93Lmp1c3RpZnktY29udGVudC1jZW50ZXIuYWxpZ24taXRlbXMtY2VudGVyLm1iLTUKICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy05CiAgICAgICAgICAudGFyamV0YS5iZy1jb2xvci01LnAtNAogICAgICAgICAgICBwLm1iLTMgQWRlbcOhcywgZXMgaW1wb3J0YW50ZSBjb25zaWRlcmFyIGxhIGluZ2VuaWVyw61hIGRlIGNhcmFjdGVyw61zdGljYXMuIEVzdG8gaW1wbGljYSBzZWxlY2Npb25hciwgdHJhbnNmb3JtYXIgbyBjcmVhciBudWV2YXMgdmFyaWFibGVzIHF1ZSBwdWVkYW4gbWVqb3JhciBlbCByZW5kaW1pZW50byBkZWwgbW9kZWxvLiBQb3IgZWplbXBsbywgZW4gdW4gcHJvYmxlbWEgZGUgcHJlZGljY2nDs24gZGUgdmVudGFzLCBwb2Ryw61hbW9zIGNyZWFyIHVuYSBudWV2YSBjYXJhY3RlcsOtc3RpY2EgcXVlIHJlcHJlc2VudGUgbGEgZXN0YWNpb25hbGlkYWQsIGNvbW8gZWwgbWVzIGRlbCBhw7FvIG8gc2kgZXMgdW4gZMOtYSBmZXN0aXZvLgogICAgICAgICAgICBwLm1iLTMgTGEgdmFsaWRhY2nDs24gY3J1emFkYSBlcyBvdHJhIHTDqWNuaWNhIGNsYXZlIGVuIGVzdGEgZXRhcGEuIEFsIGRpdmlkaXIgZWwgY29uanVudG8gZGUgZGF0b3MgZW4gbcO6bHRpcGxlcyBzdWJjb25qdW50b3MgeSBlbnRyZW5hciBlbCBtb2RlbG8gdmFyaWFzIHZlY2VzLCBwb2RlbW9zIG9idGVuZXIgdW5hIGVzdGltYWNpw7NuIG3DoXMgY29uZmlhYmxlIGRlIHN1IHJlbmRpbWllbnRvIHkgcmVkdWNpciBsYSB2YXJpYWJpbGlkYWQgYXNvY2lhZGEgYSB1bmEgc29sYSBkaXZpc2nDs24gZGUgZW50cmVuYW1pZW50byB5IHBydWViYS4KICAgICAgICAgICAgcC5tYi0wIEZpbmFsbWVudGUsIGVzIGVzZW5jaWFsIG1vbml0b3JlYXIgY29udGludWFtZW50ZSBlbCBkZXNlbXBlw7FvIGRlbCBtb2RlbG8gdW5hIHZleiBxdWUgc2UgaW1wbGVtZW50YSBlbiB1biBlbnRvcm5vIHJlYWwuIExvcyBkYXRvcyBwdWVkZW4gY2FtYmlhciBjb24gZWwgdGllbXBvLCB1biBmZW7Ds21lbm8gY29ub2NpZG8gY29tbyBkZXJpdmEgZGUgZGF0b3MsIGxvIHF1ZSBwdWVkZSBkZWdyYWRhciBlbCByZW5kaW1pZW50byBkZWwgbW9kZWxvLiBFc3RhYmxlY2VyIHVuIHByb2Nlc28gZGUgcmVlbnRyZW5hbWllbnRvIHBlcmnDs2RpY28geSBhanVzdGFyIGVsIG1vZGVsbyBlbiBmdW5jacOzbiBkZSBudWV2b3MgZGF0b3MgZ2FyYW50aXphIHF1ZSBzaWdhIHNpZW5kbyBwcmVjaXNvIHkgcm9idXN0by4KICAgICAgICAuY29sLXNtLTEyLmNvbC1sZy0zLmQtbm9uZS5kLWxnLWJsb2NrCiAgICAgICAgICBpbWcoc3JjPSdAL2Fzc2V0cy9jdXJzby90ZW1hcy90My82LnBuZycpCgogICAgLnRpdHVsby10cmVzOiBoMy5tYi0wIENvbmNsdXNpw7NuCiAgICBwLm1iLTUgRW4gZXN0ZSBjYXDDrXR1bG8sIGhlbW9zIHByb2Z1bmRpemFkbyBlbiBtw6l0cmljYXMgYXZhbnphZGFzIHkgdMOpY25pY2FzIGVzZW5jaWFsZXMgcGFyYSBsYSBldmFsdWFjacOzbiB5IGFqdXN0ZSBkZSBtb2RlbG9zIGRlIGFwcmVuZGl6YWplIGF1dG9tw6F0aWNvLiBMYSBtYXRyaXogZGUgY29uZnVzacOzbiB5IGVsIGFuw6FsaXNpcyBkZSBlcnJvcmVzIG5vcyBwZXJtaXRlbiBlbnRlbmRlciBkZXRhbGxhZGFtZW50ZSBlbCBkZXNlbXBlw7FvIGRlbCBtb2RlbG8geSBsYXMgcmF6b25lcyBkZXRyw6FzIGRlIHN1cyBlcnJvcmVzLiBMYXMgY3VydmFzIFJPQyB5IGVsIEFVQyBvZnJlY2VuIHVuYSBwZXJzcGVjdGl2YSBjb21wbGV0YSBkZSBsYSBjYXBhY2lkYWQgZGUgZGlzY3JpbWluYWNpw7NuIGRlbCBtb2RlbG8sIGVzcGVjaWFsbWVudGUgw7p0aWwgZW4gc2l0dWFjaW9uZXMgZG9uZGUgbG9zIHVtYnJhbGVzIGRlIGRlY2lzacOzbiBwdWVkZW4gdmFyaWFyLgogICAgLnJvdy5qdXN0aWZ5LWNvbnRlbnQtY2VudGVyLmFsaWduLWl0ZW1zLWNlbnRlci5tYi01CiAgICAgICAgLmNvbC1zbS0xMi5jb2wtbGctNC5kLW5vbmUuZC1sZy1ibG9jawogICAgICAgICAgICBpbWcubWItMChzcmM9J0AvYXNzZXRzL2N1cnNvL3RlbWFzL3QzLzcuc3ZnJykKCiAgICAgICAgLmNvbC1zbS0xMi5jb2wtbGctOAogICAgICAgICAgLnRhcmpldGEuYmctY29sb3ItMi5weS0yLnB4LTMKICAgICAgICAgICAgcC5tYi0zLmZ3LWJvbGQgQWJvcmRhciBlbCBwcm9ibGVtYSBkZSBsb3MgZGF0b3MgZGVzYmFsYW5jZWFkb3MgZXMgZGV0ZXJtaW5hbnRlIHBhcmEgYXNlZ3VyYXIgcXVlIGVsIG1vZGVsbyBzZWEgZWZlY3Rpdm8gZW4gdG9kYXMgbGFzIGNsYXNlcywgZXNwZWNpYWxtZW50ZSBlbiBhcXVlbGxhcyBxdWUgc29uIGRlIG1heW9yIGludGVyw6lzIHBlcm8gbWVub3MgcmVwcmVzZW50YWRhcy4gTGFzIGVzdHJhdGVnaWFzIGRpc2N1dGlkYXMgcHJvcG9yY2lvbmFuIGhlcnJhbWllbnRhcyBwcsOhY3RpY2FzIHBhcmEgbWFuZWphciBlc3RlIGRlc2Fmw61vLgogICAgICAgICAgICBwLm1iLTAuZnctYm9sZCAgRWwgcHJvY2VzbyBkZSBwcm9iYXIgeSBhanVzdGFyIGVsIG1vZGVsbyBlcyBjb250aW51byB5IHZpdGFsIHBhcmEgZ2FyYW50aXphciBzdSByZWxldmFuY2lhIHkgZWZpY2FjaWEuIEFsIGFwbGljYXIgdMOpY25pY2FzIGRlIG9wdGltaXphY2nDs24gZGUgaGlwZXJwYXLDoW1ldHJvcywgaW5nZW5pZXLDrWEgZGUgY2FyYWN0ZXLDrXN0aWNhcyB5IHZhbGlkYWNpw7NuIGFkZWN1YWRhLCBwb2RlbW9zIG1lam9yYXIgc2lnbmlmaWNhdGl2YW1lbnRlIGVsIHJlbmRpbWllbnRvIGRlbCBtb2RlbG8uIEFkZW3DoXMsIGFsIG1hbnRlbmVyIHVuIG1vbml0b3JlbyBjb25zdGFudGUgeSBhZGFwdGF0aXZvLCBub3MgYXNlZ3VyYW1vcyBkZSBxdWUgZWwgbW9kZWxvIHNpZ2Egc2llbmRvIMO6dGlsIGVuIHVuIGVudG9ybm8gY2FtYmlhbnRlLgogICAgcC5tYi0wIEVzdGUgZW5mb3F1ZSBpbnRlZ3JhbCBlbiBsYSBldmFsdWFjacOzbiB5IGFqdXN0ZSBkZSBtb2RlbG9zIGZvcnRhbGVjZSBudWVzdHJhIGNhcGFjaWRhZCBwYXJhIGRlc2Fycm9sbGFyIHNvbHVjaW9uZXMgZGUgYXByZW5kaXphamUgYXV0b23DoXRpY28gcHJlY2lzYXMsIHJvYnVzdGFzIHkgYWRhcHRhYmxlcyBhIGxhcyBuZWNlc2lkYWRlcyByZWFsZXMsIGN1bXBsaWVuZG8gY29uIGxvcyBvYmpldGl2b3MgZGUgcHJlY2lzacOzbiB5IHJvYnVzdGV6IHF1ZSBzb24gZnVuZGFtZW50YWxlcyBlbiBlbCBjYW1wbyBkZSBsYSBpbnRlbGlnZW5jaWEgYXJ0aWZpY2lhbC4K"},null]}